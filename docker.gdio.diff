diff --git a/.dockerignore b/.dockerignore
new file mode 100644
--- /dev/null
+++ ./.dockerignore
@@ -0,0 +1,6 @@
+.git/
+.github/
+target/
+build/
+workspace/
+!docker/init.lua
diff --git a/Makefile b/Makefile
--- ./Makefile
+++ ./Makefile
@@ -44,6 +44,8 @@ define build_package
 $1-$2:
 	cargo build --release --features=$1 -p avante-$2
 	cp target/release/libavante_$(shell echo $2 | tr - _).$(EXT) $(BUILD_DIR)/avante_$(shell echo $2 | tr - _).$(EXT)
+	@mkdir -p lua/avante
+	cp $(BUILD_DIR)/avante_$(shell echo $2 | tr - _).$(EXT) lua/avante/
 endef
 
 define build_targets
diff --git a/README.md b/README.md
--- ./README.md
+++ ./README.md
@@ -481,3 +481,5 @@ The high quality and ingenuity of these projects' source code have been immensel
 ## License
 
 avante.nvim is licensed under the Apache 2.0 License. For more details, please refer to the [LICENSE](./LICENSE) file.
+
+帮我设计一个二分查找算法.
diff --git a/docker/Dockerfile b/docker/Dockerfile
new file mode 100644
--- /dev/null
+++ ./docker/Dockerfile
@@ -0,0 +1,95 @@
+FROM ubuntu:22.04
+
+# 避免交互式前端
+ENV DEBIAN_FRONTEND=noninteractive
+
+# 设置时区
+ENV TZ=Asia/Shanghai
+
+# 安装必要的包
+RUN apt-get update && apt-get install -y \
+    git \
+    nodejs \
+    npm \
+    curl \
+    make \
+    gcc \
+    g++ \
+    libc-dev \
+    cmake \
+    pkg-config \
+    unzip \
+    gettext \
+    libssl-dev \
+    && rm -rf /var/lib/apt/lists/*
+
+# 安装 Rust 和 Cargo
+RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
+ENV PATH="/root/.cargo/bin:${PATH}"
+
+# 安装最新版本的 Neovim
+RUN git clone https://github.com/neovim/neovim.git /tmp/neovim \
+    && cd /tmp/neovim \
+    && make CMAKE_BUILD_TYPE=RelWithDebInfo \
+    && make install \
+    && rm -rf /tmp/neovim
+
+# 设置 Neovim 配置目录
+RUN mkdir -p /root/.config/nvim
+
+# 安装 lazy.nvim（插件管理器）
+RUN git clone --filter=blob:none https://github.com/folke/lazy.nvim.git \
+    --branch=stable /root/.local/share/nvim/lazy/lazy.nvim
+
+# 复制 init.lua
+COPY docker/init.lua /root/.config/nvim/init.lua
+
+# 复制项目到插件目录
+COPY . /root/.local/share/nvim/lazy/avante.nvim/
+
+# 构建插件
+WORKDIR /root/.local/share/nvim/lazy/avante.nvim
+RUN make clean && make BUILD_FROM_SOURCE=true
+
+# 设置工作目录
+WORKDIR /root/workspace
+
+# 清理不必要的包和缓存
+RUN apt-get clean && rm -rf /var/lib/apt/lists/*
+
+# 安装 Lua 和 LuaJIT
+RUN apt-get update && apt-get install -y \
+    lua5.1 \
+    liblua5.1-0-dev \
+    luajit \
+    libluajit-5.1-dev \
+    && rm -rf /var/lib/apt/lists/*
+
+# 设置 Lua 和 LuaJIT 的环境变量
+ENV LUA_PATH="/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua"
+ENV LUA_CPATH="/usr/local/lib/lua/5.1/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so"
+ENV PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/snap/bin:/root/.cargo/bin"
+
+# 安装 avante.nvim 并编译
+RUN nvim --headless -c "lua require('lazy').sync()" -c "qa"
+
+# 确认插件安装成功
+RUN ls -la /root/.local/share/nvim/lazy/
+
+# 如果 avante.nvim 存在，再进行编译
+RUN if [ -d "/root/.local/share/nvim/lazy/avante.nvim" ]; then \
+    cd /root/.local/share/nvim/lazy/avante.nvim && \
+    make clean && \
+    make BUILD_FROM_SOURCE=true && \
+    ls -l lua/avante/ \
+    ; fi
+
+# 验证编译结果
+RUN ls -la /root/.local/share/nvim/lazy/avante.nvim
+RUN ls -la /root/.local/share/nvim/lazy/avante.nvim/lua/avante
+
+# 设置环境变量
+ENV LD_LIBRARY_PATH=/root/.local/share/nvim/lazy/avante.nvim/lua/avante:$LD_LIBRARY_PATH
+ENV LUA_CPATH="/root/.local/share/nvim/lazy/avante.nvim/lua/avante/?.so;${LUA_CPATH}"
+
+CMD ["nvim"]
diff --git a/docker/init.lua b/docker/init.lua
new file mode 100644
--- /dev/null
+++ ./docker/init.lua
@@ -0,0 +1,147 @@
+-- init.lua
+vim.cmd 'set runtimepath^=~/.vim runtimepath+=~/.vim/after'
+vim.cmd 'let &packpath = &runtimepath'
+
+-- 禁用终端的 GUI 颜色支持
+vim.o.termguicolors = false
+
+-- 设置当前的颜色方案为 'vim'
+vim.cmd('colorscheme vim')
+
+-- 设置库路径
+local function setup_lib_path()
+  local os_name = vim.loop.os_uname().sysname:lower()
+  local ext = os_name == "linux" and "so" or (os_name == "darwin" and "dylib" or "dll")
+
+  -- 检查本地开发目录
+  local dev_path = "/root/.local/share/nvim/lazy/avante.nvim/build/avante_repo_map." .. ext
+  if vim.fn.filereadable(dev_path) == 1 then
+    local lib_path = "/root/.local/share/nvim/lazy/avante.nvim/build/?." .. ext
+    package.cpath = package.cpath .. ";" .. lib_path
+    return true
+  end
+
+  -- 检查插件目录
+  local plugin_path = vim.fn.stdpath("data") .. "/lazy/avante.nvim/lua/avante/avante_repo_map." .. ext
+  if vim.fn.filereadable(plugin_path) == 1 then
+    local lib_path = vim.fn.stdpath("data") .. "/lazy/avante.nvim/lua/avante/?." .. ext
+    package.cpath = package.cpath .. ";" .. lib_path
+    return true
+  end
+
+  return false
+end
+
+-- 引导 lazy.nvim
+local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
+if not vim.loop.fs_stat(lazypath) then
+  vim.fn.system({
+    "git",
+    "clone",
+    "--filter=blob:none",
+    "https://github.com/folke/lazy.nvim.git",
+    "--branch=stable",
+    lazypath,
+  })
+end
+vim.opt.rtp:prepend(lazypath)
+
+-- 设置插件
+require("lazy").setup({
+  {
+    "yetone/avante.nvim",
+    dir = "/root/.local/share/nvim/lazy/avante.nvim",
+    event = "VeryLazy",
+    lazy = false,
+    version = false,
+    opts = {},
+    build = function()
+      local os_name = vim.loop.os_uname().sysname:lower()
+      local ext = os_name == "linux" and "so" or (os_name == "darwin" and "dylib" or "dll")
+      local build_cmd = string.format(
+        "cd /root/.local/share/nvim/lazy/avante.nvim && make clean && make luajit BUILD_FROM_SOURCE=true"
+      )
+      local result = vim.fn.system(build_cmd)
+      if vim.v.shell_error ~= 0 then
+        error("Build failed: " .. result)
+      end
+    end,
+    config = function()
+      if not setup_lib_path() then
+        error("Failed to setup library path - no compatible library found")
+      end
+      require('avante').setup({})
+    end,
+    dependencies = {
+      "nvim-treesitter/nvim-treesitter",
+      "stevearc/dressing.nvim",
+      "nvim-lua/plenary.nvim",
+      "MunifTanjim/nui.nvim",
+      "nvim-tree/nvim-web-devicons",
+      "zbirenbaum/copilot.lua",
+      {
+        "HakonHarnes/img-clip.nvim",
+        event = "VeryLazy",
+        opts = {
+          default = {
+            embed_image_as_base64 = false,
+            prompt_for_file_name = false,
+            drag_and_drop = {
+              insert_mode = true,
+            },
+            use_absolute_path = true,
+          },
+        },
+      },
+      {
+        'MeanderingProgrammer/render-markdown.nvim',
+        opts = {
+          file_types = { "markdown", "Avante" },
+        },
+        ft = { "markdown", "Avante" },
+      },
+    },
+  },
+  {
+    "pseewald/vim-anyfold",
+    dir = "~/.vim/bundle/vim-anyfold",
+    ft = "*",
+    config = function()
+      if vim.fn.filereadable(vim.fn.expand("~/.vim/bundle/vim-anyfold/plugin/anyfold.vim")) ~= 1 then
+        return
+      end
+
+      vim.g.anyfold_fold_display = 0
+      vim.g.anyfold_fold_comments = 1
+
+      local anyfold_group = vim.api.nvim_create_augroup("anyfold_group", { clear = true })
+
+      vim.api.nvim_create_autocmd("VimEnter", {
+        group = anyfold_group,
+        callback = function()
+          vim.defer_fn(function()
+            if vim.fn.exists('*anyfold#init') == 1 then
+              vim.fn['anyfold#init'](0)
+              vim.opt_local.foldmethod = "expr"
+              vim.opt_local.foldexpr = "anyfold#fold()"
+            end
+          end, 100)
+        end
+      })
+
+      vim.api.nvim_create_autocmd("BufEnter", {
+        group = anyfold_group,
+        pattern = "*",
+        callback = function()
+          if vim.fn.exists('*anyfold#init') == 1 then
+            vim.opt_local.foldmethod = "expr"
+            vim.opt_local.foldexpr = "anyfold#fold()"
+          end
+        end
+      })
+    end
+  }
+})
+
+-- 设置推荐的 Neovim 选项
+vim.opt.laststatus = 3

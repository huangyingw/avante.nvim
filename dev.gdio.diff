diff --git a/Makefile b/Makefile
--- ./Makefile
+++ ./Makefile
@@ -49,6 +49,8 @@ define build_package
 $1-$2:
 	cargo build --release --features=$1 -p avante-$2
 	cp target/release/libavante_$(shell echo $2 | tr - _).$(EXT) $(BUILD_DIR)/avante_$(shell echo $2 | tr - _).$(EXT)
+	@mkdir -p lua/avante
+	cp $(BUILD_DIR)/avante_$(shell echo $2 | tr - _).$(EXT) lua/avante/
 endef
 
 define build_targets
diff --git a/build.sh b/build.sh
old mode 100644
new mode 100755
diff --git a/lua/avante/clipboard.lua b/lua/avante/clipboard.lua
--- ./lua/avante/clipboard.lua
+++ ./lua/avante/clipboard.lua
@@ -4,6 +4,7 @@
 local Path = require("plenary.path")
 local Utils = require("avante.utils")
 local Config = require("avante.config")
+local Logger = require("avante.logger")
 ---@module "img-clip"
 local ImgClip = nil
 
@@ -55,19 +56,34 @@ end
 ---@param filepath string
 function M.get_base64_content(filepath)
   local os_mapping = Utils.get_os_name()
+
   ---@type vim.SystemCompleted
   local output
+  local cmd
   if os_mapping == "darwin" or os_mapping == "linux" then
-    output = Utils.shell_run(("cat %s | base64 | tr -d '\n'"):format(filepath))
+    cmd = ("cat %s | base64 | tr -d '\n'"):format(filepath)
   else
-    output =
-      Utils.shell_run(("([Convert]::ToBase64String([IO.File]::ReadAllBytes('%s')) -replace '`r`n')"):format(filepath))
+    cmd = ("([Convert]::ToBase64String([IO.File]::ReadAllBytes('%s')) -replace '`r`n')"):format(filepath)
   end
+
+  Logger.write_log("Running command: " .. cmd)
+  output = Utils.shell_run(cmd)
+  Logger.write_log("Command exit code: " .. output.code)
+
   if output.code == 0 then
+    Logger.write_log("Base64 length: " .. #output.stdout)
     return output.stdout
   else
+    Logger.write_log("Error: " .. (output.stderr or "unknown error"))
     error("Failed to convert image to base64")
   end
 end
 
+M.get_paste_status = function()
+  if vim.bo.filetype == 'AvanteInput' then
+    return "Paste Mode: Image Ready"
+  end
+  return ""
+end
+
 return M
diff --git a/lua/avante/config.lua b/lua/avante/config.lua
--- ./lua/avante/config.lua
+++ ./lua/avante/config.lua
@@ -188,10 +188,10 @@ M._defaults = {
   ---@type AvanteSupportedProvider
   claude = {
     endpoint = "https://api.anthropic.com",
-    model = "claude-3-7-sonnet-20250219",
+    model = "claude-3-haiku-20240307",
     timeout = 30000, -- Timeout in milliseconds
     temperature = 0,
-    max_tokens = 8000,
+    max_tokens = 4096,
   },
   ---@type AvanteSupportedProvider
   bedrock = {
diff --git a/lua/avante/path.lua b/lua/avante/path.lua
--- ./lua/avante/path.lua
+++ ./lua/avante/path.lua
@@ -234,6 +234,9 @@ function P.clear()
 
   if not P.cache_path:exists() then P.cache_path:mkdir({ parents = true }) end
   if not P.history_path:exists() then P.history_path:mkdir({ parents = true }) end
+  
+  -- Clear the history file cache
+  history_file_cache = LRUCache:new(12)
 end
 
 return P
diff --git a/lua/avante/providers/claude.lua b/lua/avante/providers/claude.lua
--- ./lua/avante/providers/claude.lua
+++ ./lua/avante/providers/claude.lua
@@ -1,6 +1,7 @@
 local Utils = require("avante.utils")
 local Clipboard = require("avante.clipboard")
 local P = require("avante.providers")
+local Logger = require("avante.logger")
 
 ---@param tool AvanteLLMTool
 ---@return AvanteClaudeTool
@@ -232,7 +233,6 @@ function M.parse_response(ctx, data_stream, event_state, opts)
         tool_use_list = tool_use_list,
       })
     end
-    return
   elseif event_state == "error" then
     opts.on_stop({ reason = "error", error = vim.json.decode(data_stream) })
   end
@@ -306,4 +306,9 @@ function M.on_error(result)
   Utils.error(error_msg, { once = true, title = "Avante" })
 end
 
+M.support_paste_image = function()
+  local supported = Config.support_paste_image()
+  return supported
+end
+
 return M
diff --git a/lua/avante/sidebar.lua b/lua/avante/sidebar.lua
--- ./lua/avante/sidebar.lua
+++ ./lua/avante/sidebar.lua
@@ -439,10 +439,9 @@ local spinner_chars = {
   "⢰",
   "⣰",
   "⢴",
-  "⢲",
   "⢱",
   "⢸",
-  "⣸",
+  "⣹",
   "⢼",
   "⢺",
   "⢹",
@@ -1748,7 +1747,7 @@ function Sidebar:on_mount(opts)
   })
 
   self:render_result()
-  self:render_input(opts.ask)
+  self:render_input(opts)
   self:render_selected_code()
 
   local filetype = api.nvim_get_option_value("filetype", { buf = self.code.bufnr })
@@ -1890,6 +1889,8 @@ function Sidebar:initialize()
   self.file_selector:reset()
   self.file_selector:add_selected_file(filepath)
 
+  self:refresh_winids()
+
   return self
 end
 
@@ -2850,6 +2851,13 @@ function Sidebar:create_input_container(opts)
     end,
   })
 
+  -- 在 input buffer 创建后添加映射
+  if vim.fn.has('mac') == 1 then
+    vim.api.nvim_buf_set_keymap(self.input_container.bufnr, 'i', '<D-v>', 
+      [[<Cmd>lua require('avante.clipboard').paste_image()<CR>]], 
+      { noremap = true, silent = false })
+  end
+
   self:refresh_winids()
 end
 
